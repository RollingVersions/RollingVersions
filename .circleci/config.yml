version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.10.1

refs:
  - &only_master
    filters:
      branches:
        only: master

  - &not_master
    filters:
      branches:
        ignore: master

workflows:
  test:
    jobs:
      - unit-tests:
          <<: *not_master

      - staging-approval:
          <<: *not_master
          type: approval

      - deploy-staging:
          <<: *not_master
          requires:
            - staging-approval

  release:
    jobs:
      - deploy-staging:
          <<: *only_master

      - production-approval:
          type: approval
          requires:
            - deploy-staging

      - deploy-production:
          <<: *only_master
          requires:
            - production-approval

  hotfix:
    jobs:
      - hotfix-approval:
          type: approval

      - deploy-hotfix:
          <<: *only_master
          requires:
            - hotfix-approval

jobs:
  unit-tests:
    docker:
      - image: circleci/node:14
    steps:
      - setup
      - build
      - test

  deploy-staging:
    docker:
      - image: circleci/node:14
    steps:
      - setup
      - npm_auth
      - build
      # - run:
      #     name: Dry run (local)
      #     command: node packages/cli/lib/cli publish --dry-run --deploy-branch $CIRCLE_BRANCH
      # - run:
      #     name: Dry run (production)
      #     command: |
      #       set -e
      #       if [ "$USE_PRODUCTION" = "true" ]
      #       then
      #       sudo npm i -g rollingversions && rollingversions publish --dry-run --deploy-branch $CIRCLE_BRANCH
      #       fi
      - run:
          name: Publish Canary
          command: sudo npm i -g rollingversions && rollingversions publish --deploy-branch $CIRCLE_BRANCH --canary $CIRCLE_BUILD_NUM
      - push
      - deploy:
          environment: staging

  deploy-production:
    docker:
      - image: circleci/node:14
    steps:
      - setup
      - npm_auth
      - build
      - run:
          name: Publish Packages
          command: |
            set -e
            if [ "$USE_PRODUCTION" = "true" ]
            then
            sudo npm i -g rollingversions && rollingversions publish
            else
            node packages/cli/lib/cli publish
            fi
      - deploy:
          environment: production

  deploy-hotfix:
    docker:
      - image: circleci/node:14
    steps:
      - setup
      - npm_auth
      - build
      - push
      - deploy:
          environment: production
commands:
  setup:
    description: 'Checkout and install dependencies'
    steps:
      - checkout
      - run:
          name: Versions
          command: node -v && npm -v && yarn -v
      - run:
          name: Combine package.json files to single file for cache key
          command: cat packages/*/package.json > all-packages.txt
      - restore_cache:
          name: Restore Yarn Cache
          keys:
            - v1-yarn-{{ checksum "yarn.lock" }}-{{ checksum "all-packages.txt" }}
      - run:
          name: Install Dependencies
          command: '[[ -f node_modules/.yarn-integrity ]] && echo skipping || yarn install --frozen-lockfile'
      - save_cache:
          name: Save Yarn Cache
          key: v1-yarn-{{ checksum "yarn.lock" }}-{{ checksum "all-packages.txt" }}
          paths:
            - node_modules
            - packages/change-set/node_modules
            - packages/cli/node_modules
            - packages/config/node_modules
            - packages/db/node_modules
            - packages/server/node_modules
            - packages/sort-by-dependencies/node_modules
            - packages/tag-format/node_modules
            - packages/types/node_modules
            - packages/version-number/node_modules

  npm_auth:
    description: 'Authenticate with the npm registry'
    steps:
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

  build:
    steps:
      - run:
          name: Combine TypeScript files to single file for cache key
          command: cat packages/*/src/**/*.{ts,tsx} > all-typescript.txt
      - restore_cache:
          name: Restore TypeScript Cache
          keys:
            - v1-typescript-{{ checksum "yarn.lock" }}-{{ checksum "all-typescript.txt" }}
            - v1-typescript-{{ checksum "yarn.lock" }}-
      - run:
          name: Build
          command: yarn build
      - save_cache:
          name: Save TypeScript Cache
          key: v1-typescript-{{ checksum "yarn.lock" }}-{{ checksum "all-typescript.txt" }}
          paths:
            - packages/change-set/lib
            - packages/cli/lib
            - packages/config/lib
            - packages/db/lib
            - packages/server/lib
            - packages/sort-by-dependencies/lib
            - packages/tag-format/lib
            - packages/types/lib
            - packages/version-number/lib

  test:
    steps:
      - run:
          name: Test
          command: yarn test

  push:
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build Docker
          command: docker build -t $DOCKERHUB_USERNAME/rollingversions:$CIRCLE_SHA1 .
      - run:
          name: Authenticate
          command: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run:
          name: Push Docker
          command: docker push $DOCKERHUB_USERNAME/rollingversions:$CIRCLE_SHA1

  deploy:
    parameters:
      environment:
        type: enum
        enum: ['staging', 'production']
    steps:
      - kubernetes/install
      - run:
          name: Copy certificate
          command: echo "$KUBERNETES_CLUSTER_CERTIFICATE" | base64 --decode > cert.crt
      - run:
          name: Deploy to Kubernetes
          command: |
            ENVIRONMENT=<< parameters.environment >> npx jskube apply \
                    --kubeconfig=/dev/null \
                    -f .kube/deployment.ts
      - run:
          name: Wait for rollout to complete
          command: |
            npx jskube rollout status \
                    deployment/rollingversions-<< parameters.environment >> \
                    --namespace rollingversions \
                    --kubeconfig=/dev/null
